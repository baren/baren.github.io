<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coroutine | Baren Blog]]></title>
  <link href="http://baren.github.io/blog/categories/coroutine/atom.xml" rel="self"/>
  <link href="http://baren.github.io/"/>
  <updated>2016-03-04T16:11:12+08:00</updated>
  <id>http://baren.github.io/</id>
  <author>
    <name><![CDATA[enwu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yield（generator和coroutine）]]></title>
    <link href="http://baren.github.io/blog/2015/03/22/python-yield/"/>
    <updated>2015-03-22T15:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2015/03/22/python-yield</id>
    <content type="html"><![CDATA[<p>主要介绍python中yield的用法。在python中，与yield关键字相关的语法有generator和coroutine，这里会分别介绍这两种语法。</p>

<!-- more -->


<h1>generator</h1>

<p>一个函数，正常情况下，会返回一个值，但是generator，返回的是值的序列，而不是一个值。在python中，用yield来实现，比如：</p>

<pre><code class="python">
def countdown(n):
    print("Counting down from %d" % n) 
    while n &gt; 0:
        yield n
        print 'after yield'
        n -= 1 
    return
</code></pre>

<p>函数内使用yield关键字的函数，跟普通函数不一样，函数的调用并不会执行函数体，而是返回一个generator对象，比如：</p>

<pre><code class="python">&gt;&gt;&gt; a = countdown(10)  # 没有执行第一行的print语句
&gt;&gt;&gt; print a
&lt;generator object countdown at 0x10695ba00&gt;
</code></pre>

<p>要想执行函数体，可以使用</p>

<ul>
<li>generator的next()函数或者</li>
<li>for语句，sum()或者其它消费集合的操作。</li>
</ul>


<h2>next()函数</h2>

<p>generator的调用过程：</p>

<ol>
<li>当在generator上调用next()函数，会执行函数体，直到遇到yield关键字。然后</li>
<li>yield生成一个值，</li>
<li>并且在这点，函数被挂起，直到下一个next()函数调用。然后，</li>
<li>函数继续从yield语句后面执行。</li>
</ol>


<p>比如：</p>

<pre><code class="python">&gt;&gt;&gt; a = countdown(10)
&gt;&gt;&gt; print a
&lt;generator object countdown at 0x10695ba00&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; a.next()
Counting down from 10
10
&gt;&gt;&gt; a.next()
after yidle
9
</code></pre>

<p>当generator返回时（return），迭代停止，这时候，再调用next()函数，抛出StopIteration异常。</p>

<pre><code class="python">&gt;&gt;&gt; a.next()
after yidle
1
&gt;&gt;&gt; a.next()
after yidle
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<h2>迭代generator</h2>

<p>还可以使用for语句迭代generator，比如：</p>

<p>for n in countdown(10):
    print n</p>

<pre><code class="python">&gt;&gt;&gt; for n in countdown(10):
...     print n
...
Counting down from 10
10
after yidle
9
.
.
.
1
after yidle
&gt;&gt;&gt;
</code></pre>

<h2>停止generator</h2>

<p>停止一个generator，通过：</p>

<ul>
<li>return语句返回</li>
<li>抛出一个StopIteration异常</li>
</ul>


<p>如果generator停止了，继续调用next()函数，会抛出StopIteration异常。</p>

<h2>close()函数</h2>

<p>为了防止一个generator没有停止，提供了close()函数来主动停止generator，比如：</p>

<pre><code class="python">for n in countdown(10): 
    if n == 2: 
        break
    statements
</code></pre>

<p>上面程序中，for循环在生成2的时候停止了，这时候countdown并没有完全执行完成，当生成器不再调用时，调用close关闭它。</p>

<pre><code class="python">&gt;&gt;&gt; c = countdown(10)
&gt;&gt;&gt;
&gt;&gt;&gt; c.next()
Counting down from 10
10
&gt;&gt;&gt; c.close()
&gt;&gt;&gt; c.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p>在generator内部，close函数调用会导致在yield语句上抛出GeneratorExit异常，因此可以在generator内部可选择的捕获这个异常（不捕获也不会抛出异常，就像上面例子中c.close()并没有出错），来做一些清理工作：</p>

<pre><code class="python">def countdown(n):
    print("Counting down from %d" % n) 

    try:
        while n &gt; 0: 
            yield n
            n=n-1 
    except GeneratorExit:
        print("Only made it to %d" % n)
</code></pre>

<h1>协程和yield表达式</h1>

<p>yield关键字还可以作为表达式，出现在赋值表达式右边。比如：</p>

<pre><code class="python">
def receiver():
    print("Ready to receive") 
    while True:
        n = (yield) 
        print("Got %s" % n)
</code></pre>

<p>以这样的方式使用yield的函数，被称作协程。</p>

<p>与generator一样，执行这种协程函数时，调用函数并不会执行，必须先调用next()函数或者send(None)才可以执行函数，比如：</p>

<pre><code class="python">&gt;&gt;&gt; c = receiver()
&gt;&gt;&gt; c.next()
Ready to receive
&gt;&gt;&gt; c.send(1)
Got 1
&gt;&gt;&gt; c.send(2)
Got 2
&gt;&gt;&gt; c.send('Hello')
Got Hello
</code></pre>

<p>协程函数执行步骤是：</p>

<ol>
<li>先调用next()，执行协程函数，函数执行到yield表达式后挂起，等待接收send函数发给它的数据</li>
<li>调用send函数，传递给send函数的值会被协程函数内的&#8221;(yield)&ldquo;表达式返回</li>
<li>协程接收到数据，恢复执行，直到遇到下一个yield表达式</li>
</ol>


<blockquote><p>注意：
对协程函数来说，在接收数据之前，需要先执行函数体，可以使用next()和send(None)来执行。
如果调用send(非None值)，则会抛出TypeError错误：
c.send(1)
Traceback (most recent call last):
 File &ldquo;<stdin>&rdquo;, line 1, in <module>
ypeError: can&rsquo;t send non-None value to a just-started generator
.</p></blockquote>

<p>与generator一样，关闭一个协程，有两种方式：</p>

<ul>
<li>调用close函数</li>
<li>自己返回</li>
</ul>


<p>一个关闭的协程函数，如果再发送数据给它，则会抛出StopIteration异常，比如：</p>

<pre><code class="python">
&gt;&gt;&gt; c.close()
&gt;&gt;&gt; c.send(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p>调用close()函数，会在协程函数内部生成GeneratorExit异常。因此，可以捕获这个异常来做一些清理工作：</p>

<pre><code class="python">def receiver():
    print("Ready to receive") 
    try:
        while True:
            n = (yield)
            print("Got %s" % n) 
    except GeneratorExit:
        print("Receiver done")
</code></pre>

<h1>throw函数</h1>

<p>generator和协程函数，都有throw函数。原型是：</p>

<pre><code class="python">throw(type, value, traceback)
</code></pre>

<p>使用例子：</p>

<pre><code class="python">&gt;&gt;&gt; g = countdown(10)
&gt;&gt;&gt; g.next()
Counting down from 10
10
&gt;&gt;&gt; c = receiver()
&gt;&gt;&gt; c.next()
Ready to receive
&gt;&gt;&gt; c.send(1)
Got 1
&gt;&gt;&gt; g.throw(RuntimeError, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in countdown
RuntimeError: 3
&gt;&gt;&gt; c.throw(RuntimeError, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in receiver
RuntimeError: 3
</code></pre>

<p>g.throw(type, value, traceback)会抛出特定的异常（参数传的异常类型），抛出异常点是函数的挂起地点，也就是yield表达式地方，或者是当还没有调用next()函数时的函数的起始点。</p>

<p>如果：</p>

<ul>
<li>函数捕获了throw抛出的异常，并用yield生成了另一个值，那么这个值就是throw的返回值，比如：</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; def receiver():
...     print("Ready to receive")
...     try:
...             while True:
...                     n = (yield)
...                     print("Got %s" % n)
...     except Exception:
...             print("Receiver done")
...             yield 'here'
...
&gt;&gt;&gt; a = receiver()
&gt;&gt;&gt; a.next()
Ready to receive
&gt;&gt;&gt; a.send('a')
Got a
&gt;&gt;&gt; a.throw(Exception, 'exc')
Receiver done
'here'
</code></pre>

<p>throw函数与next和send一样，只是throw会抛出参数指定的异常。</p>

<h1>使用yield既生成值，又接收值</h1>

<p>函数内，可以使用yield同时接收和生成值，比如这样：</p>

<pre><code class="python">&gt;&gt;&gt; def line_splitter(delimiter=None):
...     print("Ready to split")
...     result = None
...     while True:
...             line = (yield result)
...             result = line.split(delimiter)
...
&gt;&gt;&gt; a = line_splitter(",")
&gt;&gt;&gt; a.next()
Ready to split
&gt;&gt;&gt; a.send("a,b")
['a', 'b']
</code></pre>

<p>其执行步骤：
1、第一个next()调用，使函数开始执行
2、到yield语句后，返回None语句，也就是result的初始值。
3、调用send函数，接收到的值赋值给line，并继续执行语句，send()的返回值是下一个yield生成的结果。</p>

<h1>使用generator和coroutine</h1>

<p>开发一个例子，tail -f的例子，把开头为#号的过滤掉，其它原样打印。</p>

<h2>generator使用例子：</h2>

<pre><code class="python">def g_tail(the_file):
    the_file.seek(0, 2)
    while True:
        line = the_file.readline()
        if not line:
            time.sleep(0.1)
            continue
        yield line

def g_filter_line(lines):
    for line in lines:
        if not line.startswith("#"):
            yield line

def g_print_line(lines):
    for line in lines:
        print line


if __name__ == "__main__":
    f = open('/tmp/thefile')
    g_print_line(g_filter_line(g_tail(f)))
</code></pre>

<p>使用generator，每个函数，都需要接收一个iterator或者叫generator数据，来驱动整个进程执行。</p>

<h2>coroutine例子</h2>

<pre><code class="python">import functools


def crontine(method):
    @functools.wraps(method)
    def wrapper(*args, **kwargs):
        a = method(*args, **kwargs)
        a.next()
        return a
    return wrapper


def c_tail(the_file, target):
    the_file.seek(0, 2)
    while True:
        line = the_file.readline()
        if not line:
            time.sleep(0.1)
            continue
        target.send(line)


@crontine
def c_filter_line(target):
    while True:
        line = (yield)
        if not line.startswith("#"):
            target.send(line)

@crontine
def c_print_line():
    while True:
        line = (yield)
        print line
</code></pre>

<p>使用coroutine，不需要每个函数都加参数，流程驱动是通过send函数来实现。</p>

<h1>参考资料</h1>

<ol>
<li><a href="http://www.dabeaz.com/coroutines/Coroutines.pdf">http://www.dabeaz.com/coroutines/Coroutines.pdf</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0342/">https://www.python.org/dev/peps/pep-0342/</a></li>
<li><a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/</a></li>
<li>python essential reference chapter 5</li>
<li><a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
