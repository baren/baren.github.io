<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tornado | Baren Blog]]></title>
  <link href="http://baren.github.io/blog/categories/tornado/atom.xml" rel="self"/>
  <link href="http://baren.github.io/"/>
  <updated>2016-03-04T16:11:12+08:00</updated>
  <id>http://baren.github.io/</id>
  <author>
    <name><![CDATA[enwu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[统计系统设计]]></title>
    <link href="http://baren.github.io/blog/2015/03/22/statis-udp/"/>
    <updated>2015-03-22T15:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2015/03/22/statis-udp</id>
    <content type="html"><![CDATA[<h1>需求</h1>

<p>主要用来实时统计线上所依赖服务的运行情况。</p>

<p>以分钟为最小统计维度，可以按照多个维度进行统计，比如一分钟实时状况，5分钟实时状况，10分钟实时状况。</p>

<p>所统计的数据包括依赖服务的实时错误数、成功数。</p>

<h1>设计思路</h1>

<p>由于统计需求比较明确，并需要短时间内需要上线，因此暂时不能适用storm这种对机器资源需求量比较大的场合。</p>

<p>为了保证后续可以顺利使用storm等分布式实时计算系统，其数据格式使用与storm容易处理的的nginx日志格式。</p>

<p>数据传输协议采用UDP方式。</p>

<h1>各子系统</h1>

<p>分为三个部分：</p>

<ul>
<li>发送日志模块。采用嵌入到工程代码中的方式使用。</li>
<li>数据接收系统。单独部署一个udp系统，负责接收数据，并把数据写入memcached。</li>
<li>数据展示系统。负责将memcached的数据整理后写入数据库，并以图表方式展示。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源代码研究笔记]]></title>
    <link href="http://baren.github.io/blog/2015/03/22/python-tornado-source/"/>
    <updated>2015-03-22T15:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2015/03/22/python-tornado-source</id>
    <content type="html"><![CDATA[<p>主要记录研究tornado源代码的心得笔记。</p>

<!-- more -->


<h1>命令行参数解析</h1>

<p>使用tornado，通常需要解析命令行参数，来指定运行行为，比如是否开启调试模式，端口号是多少，日志文件位置等等。</p>

<p>tornado的命令行使用方式一般是这样：</p>

<pre><code class="python">
from tornado.options import define, options
define("port", default=8888, help="run on the given port", type=int)
define("mysql_host", default="127.0.0.1:3306", help="Main user DB")
define("memcache_hosts", default="127.0.0.1:11011", multiple=True,
       help="Main user memcache servers")

def connect():
    db = database.Connection(options.mysql_host)
    ...

# 后面会跟着下面语句，一般在启动函数内

tornado.options.parse_command_line()  # 解析命令行传入参数
# or
tornado.options.parse_config_file("/etc/server.conf")  # 解析文件传入参数
</code></pre>

<p>所有的定义的参数，不管是在文件内定义的，还是通过命令行传入的，都保存到全局变量options里面。</p>

<p>甚至在模块内，也可以有自己的参数定义。其条件是比如在调用parse_command_line函数时，import这个模块。</p>

<p>这样通过define函数定义的参数和通过命令行传入的参数，都会存在options变量下面。这样使用：</p>

<pre><code class="python">
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(options.port)
</code></pre>

<p>问题是，python自带了解析命令行参数的模块<em>getopt</em>，tornado为啥不用这个，又自己写了这样的解析模块呢？</p>

<p>先了解下sys.argv和getopt模块。</p>

<h2>sys.argv介绍</h2>

<p>启动参数，会放在sys.argv下面，比如：</p>

<pre><code class="python"># argecho.py
import sys

for arg in sys.argv:
    print arg
</code></pre>

<p>使用例子：</p>

<pre><code>$ python argecho.py abc def     
argecho.py
abc
def
$ python argecho.py --help      
argecho.py
--help
$ python argecho.py -m kant.xml 
argecho.py
-m
kant.xml
</code></pre>

<p>sya.argv仅仅已空格区分，然后依次记录启动，其中argv[0]是启动脚本名称。</p>

<p>python提供了getopt来方便解析argv的参数。</p>

<h2>getopt模块</h2>

<p>getopt函数支持下面几种参数定义：</p>

<pre><code>-a
-bval
-b val
--noarg
--witharg=val
--witharg val
</code></pre>

<p>getopt有三个参数：</p>

<ul>
<li>第一个参数是需要解析的参数列表，一般是从argv[1]开始：sys.argv[1:]。</li>
<li>第二个参数是短的选项定义，单个字符的。如果需要接收参数则后面跟着冒号“:”，比如：&#8217;ab:c:&lsquo;，表示-a不接收参数，-b和-c后面都要跟着参数。</li>
<li>第三个参数提供长选项名字的列表。如果有参数，后面跟着“=”，比如：&#8217;noarg&#8217;, &lsquo;witharg=&rsquo;, &lsquo;witharg2=&rsquo;</li>
</ul>

]]></content>
  </entry>
  
</feed>
