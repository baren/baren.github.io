<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Baren Blog]]></title>
  <link href="http://baren.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://baren.github.io/"/>
  <updated>2016-03-04T16:11:12+08:00</updated>
  <id>http://baren.github.io/</id>
  <author>
    <name><![CDATA[enwu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python 函数知识]]></title>
    <link href="http://baren.github.io/blog/2016/03/02/python-function/"/>
    <updated>2016-03-02T19:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2016/03/02/python-function</id>
    <content type="html"><![CDATA[<h1>函数命名空间</h1>

<p>每次函数执行，都会创建一个 local namespace。用来存放在函数内定义的变量。</p>

<p>在函数内引用一个变量，python查找这个变量的顺序是：</p>

<ul>
<li>局部空间</li>
<li>全局空间（函数定义所在的模块定义的变量）</li>
<li>built-in namespace</li>
</ul>


<p>如果找不到，则抛出NameError。</p>

<p>如果想要在函数内修改全局变量值，则需要用global关键字声明，比如：</p>

<pre><code class="python">
a = 42
b = 37 
def foo():
    global a   # 'a' is in global namespace
    a = 13 
    b=0


foo()
# a is now 13. b is still 37.
</code></pre>

<h2>内嵌函数的命名空间</h2>

<p>函数内也可以定义函数，这叫nested function。内嵌函数的包围函数被称作外围函数（outer function）。在内嵌函数内绑定的变量是定义在词法空间（lexical scoping），在内嵌函数内，引用变量的顺序是：</p>

<ul>
<li>lexical scoping</li>
<li>局部空间</li>
<li>全局空间（函数定义所在的模块定义的变量）</li>
<li>built-in namespace</li>
</ul>


<p>在内嵌函数内，可以访问包围其函数内定义的变量（对内嵌函数来说，外围函数定义的变量被称作自由变量 free variables），但是不能再内嵌函数中重新绑定其外围函数定义的变量。比如：</p>

<pre><code class="python">
def test():
    b = 2
    def inner():
        b -= 1
    inner()

if __name__ == "__main__":
    test()

结果是：
UnboundLocalError: local variable 'b' referenced before assignment
</code></pre>

<p>只能在内嵌函数的最外层函数和全局空间内更改变量（python3用nonlocal关键字解决这个问题）。</p>

<h2>闭包</h2>

<p>函数是first-class对象，因此，函数可以：</p>

<ul>
<li>赋值给变量</li>
<li>作为参数传递给函数</li>
<li>作为函数结果返回</li>
<li>存放在数据结构中</li>
</ul>


<p>当把函数作为数据处理时，函数会隐含的带着一些额外的相关信息，这些相关信息就是函数定义处的一些数据。</p>

<p>比如：</p>

<pre><code class="python"># foo.py
x = 42
def callf(func):
    return func()
</code></pre>

<p>观察行为</p>

<pre><code class="python">
&gt;&gt;&gt; import foo
&gt;&gt;&gt; x = 37
&gt;&gt;&gt; def helloworld():
...     return "Hello World. x is %d" % x
...
&gt;&gt;&gt; foo.callf(helloworld)  # Pass a function as an argument 'Hello World. x is 37'
&gt;&gt;&gt;
</code></pre>

<p>这里结果是helloworld定义位置的x的值，而不是执行位置的x的值。</p>

<p>闭包定义：</p>

<p>闭包是在其词法上下文（内嵌函数内部）中引用了自由变量（外围函数定义的变量）的函数。主要用途是当有需要延迟计算的情况，用闭包更简洁。</p>

<p>比如：</p>

<pre><code class="python">from urllib import urlopen
# from urllib.request import urlopen (Python 3) 

def page(url):
    def get():
        return urlopen(url).read()  # 引用了自由变量url，这个值取自定义函数的时候
    return get
</code></pre>

<p>使用闭包例子：</p>

<pre><code class="python">&gt;&gt;&gt; python = page("http://www.python.org") 
&gt;&gt;&gt; python
&lt;function get at 0x95d5f0&gt;
&gt;&gt;&gt; jython = page("http://www.jython.org")
&gt;&gt;&gt; jython
&lt;function get at 0x9735f0&gt;
&gt;&gt;&gt; pydata = python()   # Fetches http://www.python.org
&gt;&gt;&gt; jydata = jython()   # Fetches http://www.jython.org
&gt;&gt;&gt;
</code></pre>

<p>看上面的例子，当调用page函数时，返回的是内嵌函数，并没有立即执行，但是打开的url是固定的了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 模块知识]]></title>
    <link href="http://baren.github.io/blog/2016/02/26/python-model/"/>
    <updated>2016-02-26T19:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2016/02/26/python-model</id>
    <content type="html"><![CDATA[<h1>模块对象</h1>

<p>每一个源文件就是对应一个model。
模块与模块之间的依赖通过import和from语句进行关联。
在其它语言中，有全局变量可供模块之间共享，python中，全局变量在模块间不共享，只属于一个模块。</p>

<p>模块名与模块的文件名是一样的。</p>

<p>模块也是一个对象，因此可以将模块作为参数传递，赋值给变量或存数容器，作为函数结果返回等。是<em>first-class</em>对象。</p>

<p>import语句的语法是：
<code>python
import modname [as varname][,...]
</code></p>

<p>这行语句执行完成，会把变量modname绑定到模块对象上。</p>

<p>模块内的语句，在第一次被import时执行。模块对象先于语句执行而创建，并存放在<code>sys.modules</code>中。</p>

<h2>模块属性</h2>

<p>import语句会为模块内的所有属性创建一个模块的命名空间（只有第一次import才会执行模块内语句）。模块体内的语句就是在这个命名空间内创建和绑定模块的属性，def创建函数属性，class创建类属性等等。</p>

<p>除了模块体明确定义的属性，在执行模块内语句之前，import还会额外给模块创建一些属性：</p>

<p>比如：</p>

<pre><code class="python">
['__all__', '__builtins__', '__doc__', '__file__', '__get_builtin_constructor', '__name__', '__package__',
</code></pre>

<ul>
<li><strong>dict</strong> : 用这个字典对象作为模块属性的命名空间。<strong>dict</strong>在模块内不能直接使用，其它（比如<strong>file</strong>，因为是在执行语句之前就创建好了）可以。对于模块M来说，M.S=x 实际上恒等于M.<strong>dict</strong>[&rsquo;S&#8217;]=x.</li>
</ul>


<p>比如：</p>

<pre><code class="python">print __file__
print __dict__
</code></pre>

<p>输出结果：</p>

<pre><code>/Users/user/work/project/auto_deploy/tst.py
Traceback (most recent call last):
  File "/Users/user/work/project/auto_deploy/tst.py", line 6, in &lt;module&gt;
    print __dict__
NameError: name '__dict__' is not defined
</code></pre>

<ul>
<li><strong>name</strong>：模块名</li>
<li><strong>file</strong>：模块文件</li>
<li><strong>doc</strong>：注释</li>
</ul>


<h2>模块私有化属性</h2>

<p>python模块没有真正的私有化属性，按照惯例，只要在模块内定义的属性是以单下划线开头，就认为是私有的，比如_secret.</p>

<h2>模块加载</h2>

<p>实际上，python加载模块是靠内置的<code>__import__</code>函数进行的。我们也可以直接调用这个函数。import M，<code>__import__</code>会先用key M去查sys.modules，如果在里面，直接返回值；如果不在，<code>__import__</code>会创建一个空模块对象，并增加<code>__name__</code>属性，其值是M，并把这个模块赋值给 sys.modules[M] ，然后按照正确方式加载模块对象（后面有）。因此只有第一次import一个对象时是慢的，以后直接从sys.modules对象中返回。</p>

<h3>在磁盘系统搜索模块</h3>

<p>当加载一个模块，先检查是否是内置对象（在sys.builtin_module_names 中列出），如果不在，则从磁盘中搜索。</p>

<p><em><strong>import</strong></em>会按照sys.path列表中存的路径顺序一个个搜索模块。sys.path中既可以是目录，也可以是zip格式的归档文件。python启动时，会用PYTHONPATH来初始会sys.path。sys.path的第一个字符串总是程序启动的当前目录。</p>

<p>因此，可以通过修改sys.path来操纵搜索逻辑。</p>

<h3>重新加载模块</h3>

<p>可以通过调用reload.reload(M)函数重新加载模块，reload函数的参数是M对象，而不是字符串。通过重新加载模块，影响的是通过import M这种方式，并通过M.A进行访问的代码。那种通过from M import 引入的则不受影响。</p>

<h3>循环引用</h3>

<p>python允许循环引用，比如a.py中import b，而b.py中import a。</p>

<p>已import a为例说明循环引用的加载逻辑</p>

<p>循环引用的执行过程：</p>

<p>import a语句会创建一个空模块对象，并赋值给sys.models[&lsquo;a&rsquo;] ,
然后开始执行a模块语句，如果遇到import b，则开始加载模块b，同样创建模块对象，并赋值给sys.models[&lsquo;b&rsquo;].
执行模块b的语句。这是a模块的语句执行是阻塞的，直到b执行完成。</p>

<p>这样，执行模块b的body时，遇到import a，则由于之前已经通过赋值sys.models[&lsquo;a&rsquo;]有数据，因此直接返回这个未初始化完成的a模块对象。这样，有可能a中的属性还没有被初始化。</p>

<h1>包</h1>

<p>python中，一个目录下需要定义<code>__init__</code>.py文件，才能标记这个目录是个包。包的体就是<code>__init__.py</code>文件内容。</p>

<p>导入包的时候，会首先执行<code>__init__.py</code>内容。</p>

<h2>包的特殊属性</h2>

<p>包P的<code>__file__</code>的值实际上是包P体的内容，也就是<code>P/__init__.py</code>的路径。</p>

<p>比如：</p>

<pre><code class="python">import view
print view.__file__
</code></pre>

<p>结果是</p>

<pre><code>/Users/user/work/project/m-api/view/__init__.pyc
</code></pre>

<p>可以在<em>P/<strong>init</strong>.py</em>中设置<em><strong>all</strong></em>全局变量，用来控制其他模块执行<code>from P import *</code>语句时的行为。如果没有设置这个属性，则<code>from P import *</code>不会导入任何P的模块。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计系统设计]]></title>
    <link href="http://baren.github.io/blog/2015/03/22/statis-udp/"/>
    <updated>2015-03-22T15:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2015/03/22/statis-udp</id>
    <content type="html"><![CDATA[<h1>需求</h1>

<p>主要用来实时统计线上所依赖服务的运行情况。</p>

<p>以分钟为最小统计维度，可以按照多个维度进行统计，比如一分钟实时状况，5分钟实时状况，10分钟实时状况。</p>

<p>所统计的数据包括依赖服务的实时错误数、成功数。</p>

<h1>设计思路</h1>

<p>由于统计需求比较明确，并需要短时间内需要上线，因此暂时不能适用storm这种对机器资源需求量比较大的场合。</p>

<p>为了保证后续可以顺利使用storm等分布式实时计算系统，其数据格式使用与storm容易处理的的nginx日志格式。</p>

<p>数据传输协议采用UDP方式。</p>

<h1>各子系统</h1>

<p>分为三个部分：</p>

<ul>
<li>发送日志模块。采用嵌入到工程代码中的方式使用。</li>
<li>数据接收系统。单独部署一个udp系统，负责接收数据，并把数据写入memcached。</li>
<li>数据展示系统。负责将memcached的数据整理后写入数据库，并以图表方式展示。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yield（generator和coroutine）]]></title>
    <link href="http://baren.github.io/blog/2015/03/22/python-yield/"/>
    <updated>2015-03-22T15:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2015/03/22/python-yield</id>
    <content type="html"><![CDATA[<p>主要介绍python中yield的用法。在python中，与yield关键字相关的语法有generator和coroutine，这里会分别介绍这两种语法。</p>

<!-- more -->


<h1>generator</h1>

<p>一个函数，正常情况下，会返回一个值，但是generator，返回的是值的序列，而不是一个值。在python中，用yield来实现，比如：</p>

<pre><code class="python">
def countdown(n):
    print("Counting down from %d" % n) 
    while n &gt; 0:
        yield n
        print 'after yield'
        n -= 1 
    return
</code></pre>

<p>函数内使用yield关键字的函数，跟普通函数不一样，函数的调用并不会执行函数体，而是返回一个generator对象，比如：</p>

<pre><code class="python">&gt;&gt;&gt; a = countdown(10)  # 没有执行第一行的print语句
&gt;&gt;&gt; print a
&lt;generator object countdown at 0x10695ba00&gt;
</code></pre>

<p>要想执行函数体，可以使用</p>

<ul>
<li>generator的next()函数或者</li>
<li>for语句，sum()或者其它消费集合的操作。</li>
</ul>


<h2>next()函数</h2>

<p>generator的调用过程：</p>

<ol>
<li>当在generator上调用next()函数，会执行函数体，直到遇到yield关键字。然后</li>
<li>yield生成一个值，</li>
<li>并且在这点，函数被挂起，直到下一个next()函数调用。然后，</li>
<li>函数继续从yield语句后面执行。</li>
</ol>


<p>比如：</p>

<pre><code class="python">&gt;&gt;&gt; a = countdown(10)
&gt;&gt;&gt; print a
&lt;generator object countdown at 0x10695ba00&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; a.next()
Counting down from 10
10
&gt;&gt;&gt; a.next()
after yidle
9
</code></pre>

<p>当generator返回时（return），迭代停止，这时候，再调用next()函数，抛出StopIteration异常。</p>

<pre><code class="python">&gt;&gt;&gt; a.next()
after yidle
1
&gt;&gt;&gt; a.next()
after yidle
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<h2>迭代generator</h2>

<p>还可以使用for语句迭代generator，比如：</p>

<p>for n in countdown(10):
    print n</p>

<pre><code class="python">&gt;&gt;&gt; for n in countdown(10):
...     print n
...
Counting down from 10
10
after yidle
9
.
.
.
1
after yidle
&gt;&gt;&gt;
</code></pre>

<h2>停止generator</h2>

<p>停止一个generator，通过：</p>

<ul>
<li>return语句返回</li>
<li>抛出一个StopIteration异常</li>
</ul>


<p>如果generator停止了，继续调用next()函数，会抛出StopIteration异常。</p>

<h2>close()函数</h2>

<p>为了防止一个generator没有停止，提供了close()函数来主动停止generator，比如：</p>

<pre><code class="python">for n in countdown(10): 
    if n == 2: 
        break
    statements
</code></pre>

<p>上面程序中，for循环在生成2的时候停止了，这时候countdown并没有完全执行完成，当生成器不再调用时，调用close关闭它。</p>

<pre><code class="python">&gt;&gt;&gt; c = countdown(10)
&gt;&gt;&gt;
&gt;&gt;&gt; c.next()
Counting down from 10
10
&gt;&gt;&gt; c.close()
&gt;&gt;&gt; c.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p>在generator内部，close函数调用会导致在yield语句上抛出GeneratorExit异常，因此可以在generator内部可选择的捕获这个异常（不捕获也不会抛出异常，就像上面例子中c.close()并没有出错），来做一些清理工作：</p>

<pre><code class="python">def countdown(n):
    print("Counting down from %d" % n) 

    try:
        while n &gt; 0: 
            yield n
            n=n-1 
    except GeneratorExit:
        print("Only made it to %d" % n)
</code></pre>

<h1>协程和yield表达式</h1>

<p>yield关键字还可以作为表达式，出现在赋值表达式右边。比如：</p>

<pre><code class="python">
def receiver():
    print("Ready to receive") 
    while True:
        n = (yield) 
        print("Got %s" % n)
</code></pre>

<p>以这样的方式使用yield的函数，被称作协程。</p>

<p>与generator一样，执行这种协程函数时，调用函数并不会执行，必须先调用next()函数或者send(None)才可以执行函数，比如：</p>

<pre><code class="python">&gt;&gt;&gt; c = receiver()
&gt;&gt;&gt; c.next()
Ready to receive
&gt;&gt;&gt; c.send(1)
Got 1
&gt;&gt;&gt; c.send(2)
Got 2
&gt;&gt;&gt; c.send('Hello')
Got Hello
</code></pre>

<p>协程函数执行步骤是：</p>

<ol>
<li>先调用next()，执行协程函数，函数执行到yield表达式后挂起，等待接收send函数发给它的数据</li>
<li>调用send函数，传递给send函数的值会被协程函数内的&#8221;(yield)&ldquo;表达式返回</li>
<li>协程接收到数据，恢复执行，直到遇到下一个yield表达式</li>
</ol>


<blockquote><p>注意：
对协程函数来说，在接收数据之前，需要先执行函数体，可以使用next()和send(None)来执行。
如果调用send(非None值)，则会抛出TypeError错误：
c.send(1)
Traceback (most recent call last):
 File &ldquo;<stdin>&rdquo;, line 1, in <module>
ypeError: can&rsquo;t send non-None value to a just-started generator
.</p></blockquote>

<p>与generator一样，关闭一个协程，有两种方式：</p>

<ul>
<li>调用close函数</li>
<li>自己返回</li>
</ul>


<p>一个关闭的协程函数，如果再发送数据给它，则会抛出StopIteration异常，比如：</p>

<pre><code class="python">
&gt;&gt;&gt; c.close()
&gt;&gt;&gt; c.send(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p>调用close()函数，会在协程函数内部生成GeneratorExit异常。因此，可以捕获这个异常来做一些清理工作：</p>

<pre><code class="python">def receiver():
    print("Ready to receive") 
    try:
        while True:
            n = (yield)
            print("Got %s" % n) 
    except GeneratorExit:
        print("Receiver done")
</code></pre>

<h1>throw函数</h1>

<p>generator和协程函数，都有throw函数。原型是：</p>

<pre><code class="python">throw(type, value, traceback)
</code></pre>

<p>使用例子：</p>

<pre><code class="python">&gt;&gt;&gt; g = countdown(10)
&gt;&gt;&gt; g.next()
Counting down from 10
10
&gt;&gt;&gt; c = receiver()
&gt;&gt;&gt; c.next()
Ready to receive
&gt;&gt;&gt; c.send(1)
Got 1
&gt;&gt;&gt; g.throw(RuntimeError, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in countdown
RuntimeError: 3
&gt;&gt;&gt; c.throw(RuntimeError, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in receiver
RuntimeError: 3
</code></pre>

<p>g.throw(type, value, traceback)会抛出特定的异常（参数传的异常类型），抛出异常点是函数的挂起地点，也就是yield表达式地方，或者是当还没有调用next()函数时的函数的起始点。</p>

<p>如果：</p>

<ul>
<li>函数捕获了throw抛出的异常，并用yield生成了另一个值，那么这个值就是throw的返回值，比如：</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; def receiver():
...     print("Ready to receive")
...     try:
...             while True:
...                     n = (yield)
...                     print("Got %s" % n)
...     except Exception:
...             print("Receiver done")
...             yield 'here'
...
&gt;&gt;&gt; a = receiver()
&gt;&gt;&gt; a.next()
Ready to receive
&gt;&gt;&gt; a.send('a')
Got a
&gt;&gt;&gt; a.throw(Exception, 'exc')
Receiver done
'here'
</code></pre>

<p>throw函数与next和send一样，只是throw会抛出参数指定的异常。</p>

<h1>使用yield既生成值，又接收值</h1>

<p>函数内，可以使用yield同时接收和生成值，比如这样：</p>

<pre><code class="python">&gt;&gt;&gt; def line_splitter(delimiter=None):
...     print("Ready to split")
...     result = None
...     while True:
...             line = (yield result)
...             result = line.split(delimiter)
...
&gt;&gt;&gt; a = line_splitter(",")
&gt;&gt;&gt; a.next()
Ready to split
&gt;&gt;&gt; a.send("a,b")
['a', 'b']
</code></pre>

<p>其执行步骤：
1、第一个next()调用，使函数开始执行
2、到yield语句后，返回None语句，也就是result的初始值。
3、调用send函数，接收到的值赋值给line，并继续执行语句，send()的返回值是下一个yield生成的结果。</p>

<h1>使用generator和coroutine</h1>

<p>开发一个例子，tail -f的例子，把开头为#号的过滤掉，其它原样打印。</p>

<h2>generator使用例子：</h2>

<pre><code class="python">def g_tail(the_file):
    the_file.seek(0, 2)
    while True:
        line = the_file.readline()
        if not line:
            time.sleep(0.1)
            continue
        yield line

def g_filter_line(lines):
    for line in lines:
        if not line.startswith("#"):
            yield line

def g_print_line(lines):
    for line in lines:
        print line


if __name__ == "__main__":
    f = open('/tmp/thefile')
    g_print_line(g_filter_line(g_tail(f)))
</code></pre>

<p>使用generator，每个函数，都需要接收一个iterator或者叫generator数据，来驱动整个进程执行。</p>

<h2>coroutine例子</h2>

<pre><code class="python">import functools


def crontine(method):
    @functools.wraps(method)
    def wrapper(*args, **kwargs):
        a = method(*args, **kwargs)
        a.next()
        return a
    return wrapper


def c_tail(the_file, target):
    the_file.seek(0, 2)
    while True:
        line = the_file.readline()
        if not line:
            time.sleep(0.1)
            continue
        target.send(line)


@crontine
def c_filter_line(target):
    while True:
        line = (yield)
        if not line.startswith("#"):
            target.send(line)

@crontine
def c_print_line():
    while True:
        line = (yield)
        print line
</code></pre>

<p>使用coroutine，不需要每个函数都加参数，流程驱动是通过send函数来实现。</p>

<h1>参考资料</h1>

<ol>
<li><a href="http://www.dabeaz.com/coroutines/Coroutines.pdf">http://www.dabeaz.com/coroutines/Coroutines.pdf</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0342/">https://www.python.org/dev/peps/pep-0342/</a></li>
<li><a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/</a></li>
<li>python essential reference chapter 5</li>
<li><a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源代码研究笔记]]></title>
    <link href="http://baren.github.io/blog/2015/03/22/python-tornado-source/"/>
    <updated>2015-03-22T15:32:01+08:00</updated>
    <id>http://baren.github.io/blog/2015/03/22/python-tornado-source</id>
    <content type="html"><![CDATA[<p>主要记录研究tornado源代码的心得笔记。</p>

<!-- more -->


<h1>命令行参数解析</h1>

<p>使用tornado，通常需要解析命令行参数，来指定运行行为，比如是否开启调试模式，端口号是多少，日志文件位置等等。</p>

<p>tornado的命令行使用方式一般是这样：</p>

<pre><code class="python">
from tornado.options import define, options
define("port", default=8888, help="run on the given port", type=int)
define("mysql_host", default="127.0.0.1:3306", help="Main user DB")
define("memcache_hosts", default="127.0.0.1:11011", multiple=True,
       help="Main user memcache servers")

def connect():
    db = database.Connection(options.mysql_host)
    ...

# 后面会跟着下面语句，一般在启动函数内

tornado.options.parse_command_line()  # 解析命令行传入参数
# or
tornado.options.parse_config_file("/etc/server.conf")  # 解析文件传入参数
</code></pre>

<p>所有的定义的参数，不管是在文件内定义的，还是通过命令行传入的，都保存到全局变量options里面。</p>

<p>甚至在模块内，也可以有自己的参数定义。其条件是比如在调用parse_command_line函数时，import这个模块。</p>

<p>这样通过define函数定义的参数和通过命令行传入的参数，都会存在options变量下面。这样使用：</p>

<pre><code class="python">
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(options.port)
</code></pre>

<p>问题是，python自带了解析命令行参数的模块<em>getopt</em>，tornado为啥不用这个，又自己写了这样的解析模块呢？</p>

<p>先了解下sys.argv和getopt模块。</p>

<h2>sys.argv介绍</h2>

<p>启动参数，会放在sys.argv下面，比如：</p>

<pre><code class="python"># argecho.py
import sys

for arg in sys.argv:
    print arg
</code></pre>

<p>使用例子：</p>

<pre><code>$ python argecho.py abc def     
argecho.py
abc
def
$ python argecho.py --help      
argecho.py
--help
$ python argecho.py -m kant.xml 
argecho.py
-m
kant.xml
</code></pre>

<p>sya.argv仅仅已空格区分，然后依次记录启动，其中argv[0]是启动脚本名称。</p>

<p>python提供了getopt来方便解析argv的参数。</p>

<h2>getopt模块</h2>

<p>getopt函数支持下面几种参数定义：</p>

<pre><code>-a
-bval
-b val
--noarg
--witharg=val
--witharg val
</code></pre>

<p>getopt有三个参数：</p>

<ul>
<li>第一个参数是需要解析的参数列表，一般是从argv[1]开始：sys.argv[1:]。</li>
<li>第二个参数是短的选项定义，单个字符的。如果需要接收参数则后面跟着冒号“:”，比如：&#8217;ab:c:&lsquo;，表示-a不接收参数，-b和-c后面都要跟着参数。</li>
<li>第三个参数提供长选项名字的列表。如果有参数，后面跟着“=”，比如：&#8217;noarg&#8217;, &lsquo;witharg=&rsquo;, &lsquo;witharg2=&rsquo;</li>
</ul>

]]></content>
  </entry>
  
</feed>
