<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python essential reference | Baren Blog]]></title>
  <link href="http://baren.github.io/blog/categories/python-essential-reference/atom.xml" rel="self"/>
  <link href="http://baren.github.io/"/>
  <updated>2014-10-14T22:20:23+08:00</updated>
  <id>http://baren.github.io/</id>
  <author>
    <name><![CDATA[enwu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python 作用域规则]]></title>
    <link href="http://baren.github.io/blog/2014/09/13/per4-checpter6-function-and-functional-programming/"/>
    <updated>2014-09-13T17:07:23+08:00</updated>
    <id>http://baren.github.io/blog/2014/09/13/per4-checpter6-function-and-functional-programming</id>
    <content type="html"><![CDATA[<h1>作用域规则</h1>

<p>每当一个函数执行，都会创建一个局部命名空间（local namespace）。这个命名空间代表了一个局部环境，这个环境包含了凡是参数的名字、在函数内定义的局部变量等。当解析一个名字时，解析器会：</p>

<ul>
<li>首先检查局部环境变量</li>
<li>如果在局部命名空间中找不到，然后再往上寻找全局命名空间（global namespace），全局命名空间是函数定义所在的模块。</li>
<li>如果在全局命名空间不存在，解释器会查找内置的命名空间，如果还找不到，则NameError异常抛出</li>
</ul>


<p>python的命名空间的一个特点就是：在函数内处理全局变量。</p>

<p>比如：</p>

<!-- more -->


<pre><code class="python">
a = 42 
def foo():
    a = 13 
foo()
# a 还是 42
</code></pre>

<p>这里，虽然在函数foo内给a赋值为13，但是：<em>当一个变量在函数内赋值时，结果总是把这个变量绑定到局部命名空间中</em>，因此在foo内，a与全局变量的a是不一样的。</p>

<p>如果要在函数内修改全局变量，必须使用<em>global</em>关键字来修饰变量。表示的意思是简单的生命这个名字属于全局命名空间。这只在这个变量需要被修改的情况下。
例子：</p>

<pre><code class="python">
a = 42
b = 37 

def foo():
    global a  # 'a' 此时在全局命名空间中
    a = 13 
    b=0

foo()
# a 是 13. b 仍然是 37.
</code></pre>

<h2>嵌套函数中的变量作用域</h2>

<p>python支持嵌套函数定义，也就是在函数内定义函数：</p>

<pre><code class="python">
def countdown(start): 
    n = start
    def display(): # Nested function definition 
        print('T-minus %d' % n)
    while n &gt; 0: 
        display()
        n -= 1
</code></pre>

<p>当作用域涉及到嵌套函数时，变量的搜寻是按照<em>词法范围（lexical scoping）</em>来查找的。意思是：</p>

<ul>
<li>变量名字受限检查局部范围</li>
<li>然后是函数定义处外围范围，依次往外查找，从最内层到最外层范围</li>
<li>然后就是全局命名空间</li>
<li>最后是内置的命名空间</li>
</ul>


<p>在给变量赋值时，牵扯到嵌套函数，python2有个限制是：</p>

<ul>
<li>只允许在最内层范围的和全局范围的（使用global）的变量可以被赋值。</li>
</ul>


<p>这意味着：</p>

<ul>
<li>内部函数不能够给一个局部变量赋值，这个局部变量是定义在内部函数的外围函数内。</li>
</ul>


<p>比如：</p>

<pre><code>def countdown(start):
    n = start

    def display():
        print('T-minus %d' % n)

    def decrement():
        n -= 1 # 在Python 2是错误的，这里不能修改这个值。

    while n &gt; 0: 
        display()
        decrement()
</code></pre>

<p>在python3中，可以使用<em>nonlocal</em>关键字来修改：</p>

<pre><code class="python">
def countdown(start):
    n = start

    def display(): 
        print('T-minus %d' % n) 

    def decrement():
        nonlocal n
        n -= 1  # 绑定到外围的 n (Python 3)

    while n &gt; 0: 
        display()
        decrement()
</code></pre>

<p>如果一个局部变量在赋值前被使用，则会抛出UnboundLocalError的错误，比如：</p>

<pre><code class="python">
i=0
def foo():
    i = i + 1 # 导致UnboundLocalError 异常 
    print(i)
</code></pre>

<p>在这个例子中，变量<em>i</em>被定义为局部变量（在函数内被赋值，并且没有global关键字声明），这样，在执行 i = i +1 语句时，会试图读取变量“i”的值，会导致错误。</p>

<h1>函数作为对象和闭包（closure）</h1>

<h2>函数作为对象</h2>

<p>python中，函数是一级对象（first-class），意思是</p>

<ul>
<li>函数可以作为参数传递给其它函数</li>
<li>放在数据结构中</li>
<li>以及作为结果从函数中返回。</li>
</ul>


<p>注意：</p>

<blockquote><p>当函数作为数据被处理时，需要注意的是：函数隐含的携带了在函数定义处的外围环境信息。这会影响到自由的变量在函数内怎么被绑定。</p></blockquote>

<p>比如下面例子：</p>

<pre><code class="python foo_test.py">
x = 33
def print_x():
    print x
</code></pre>

<p>然后在foo.py文件中导入foo_test：</p>

<pre><code class="python foo.py">
x = 42

def foo(func):
    func()


if __name__ == "__main__":
    foo(foo_test.print_x)

// 输出结果是33，而不是此处定义的42
</code></pre>

<p>在这个例子中，需要注意的是print_x使用的x是他所定义处的x的值，而不是在执行处的值，虽然在执行的地方，也定义了同样的变量。</p>

<h2>闭包</h2>

<p>闭包的定义：
组成函数的语句，与执行的环境绑定在一起，产生的对象，被称为闭包。可以简单的认为闭包是一个函数，它在词法上下文中引用了自由变量，所谓自由变量就是除局部变量以外的变量。</p>

<p>闭包只是在形式和表现上像函数，但实际上不是函数。函数是一些可执行的代码，这些代码在函数被定义后就确定了，不会在执行时发生变化，所以一个函数只有一个实例。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例</p>

<p>一般有闭包特征的语言有下面这样的特性：</p>

<ul>
<li>函数是第一级对象（first-class）</li>
<li>函数可以嵌套定义。</li>
</ul>


<p>当嵌套函数被使用时，闭包会捕获嵌套函数执行所需要的整个环境。比如：</p>

<pre><code class="python">
import foo 
def bar(): 
    x = 13

def helloworld():
    return "Hello World. x is %d" % x
    foo.callf(helloworld)   # returns 'Hello World, x is 13'
</code></pre>

<p>闭包和嵌套函数在你想延迟计算时，比较有用：</p>

<pre><code class="python">
from urllib import urlopen
# from urllib.request import urlopen (Python 3) 

def page(url):

    def get():
        return urlopen(url).read()
    return get
</code></pre>

<p>执行如下：</p>

<pre><code class="python">
&gt;&gt;&gt; python_url = page("http://www.python.org") 
&gt;&gt;&gt; jython_url = page("http://www.jython.org") 
&gt;&gt;&gt; python_url
&lt;function get at 0x95d5f0&gt;
&gt;&gt;&gt; jython
&lt;function get at 0x9735f0&gt;
&gt;&gt;&gt; pydata = python()  # 读取url内容
&gt;&gt;&gt; jydata = jython()  # 读取url内容
</code></pre>

<p>对于上面这个闭包例子，解释如下：</p>

<ul>
<li>两个变量python_url和jython_url实际上是两个不同的get函数的版本（语句与外围环境的绑定）</li>
<li>即使创建这两个变量的函数page不再运行，get函数暗中的携带了get函数使用的外围get函数定义处的变量。</li>
<li>当get调用时，绑定了代码和外围的变量。</li>
</ul>


<p>闭包一个非常有用的方式是：<em>可以用来保存跨越一系列函数调用的状态（函数式编程所用到的状态的保存）</em>，比如：</p>

<pre><code class="python">
def countdown(n): 
    def next():
        nonlocal n  # python3
        r=n
        n -= 1 
        return r
    return next

# Example use
next = countdown(10) 
while True:
    v = next()  # 获取下一个值
    if not v: 
        break
</code></pre>

<p>在这段代码中，闭包被用来保存内部的计数值 n。这样，每次调用next()函数时，都能够更新和返回上一个计数变量的值（感觉就是更新了一个全局变量，但是这个n实际上是一个局部变量）。</p>

<p>假设，语言不支持闭包，那么要实现上面同样的功能，可以这样(基本原则是在函数外定义一个变量，变量的生命周期不随函数调用而结束)：</p>

<pre><code class="python">
class Countdown(object): 

    def __init__(self,n):
        self.n = n 

    def next(self):
        r = self.n 
        self.n -= 1 
        return r

# Example use
c = Countdown(10) 

while True:
    v = c.next() # 获取下一个值
    if not v: 
        break
</code></pre>

<p>总结：</p>

<blockquote><p>闭包可以保存变量的状态，这个变量不随着闭包调用结束而丢失。重要的特性。
闭包可以捕获嵌套函数的环境的特性，在包装一个存在的函数来增加额外的功能的时候，非常有用（装饰器）。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序结构和控制]]></title>
    <link href="http://baren.github.io/blog/2014/09/06/per4-chapter5-program-structure-and-control-flow/"/>
    <updated>2014-09-06T21:56:14+08:00</updated>
    <id>http://baren.github.io/blog/2014/09/06/per4-chapter5-program-structure-and-control-flow</id>
    <content type="html"><![CDATA[<h1>程序结构和执行</h1>

<p>python程序被组织为一个语句序列。所有的语言特性，包括变量赋值、函数定义、类定义和模块导入等，都是语句，都是与其他语句具有相同状态。</p>

<p>因此所有语句都可以放置在程序的任何地方。</p>

<p>比如：</p>

<pre><code class="python">if debug:
    def square(x):
        if not isinstance(x,float):
            raise TypeError("Expected a float")
        return x * x
else:
    def square(x):
        return x * x
</code></pre>

<p>当加载文件时，python解释器顺序的执行每一条语句，知道不能执行为止。</p>

<p>这种执行方式对于简单的作为主程序执行，或者经过import进行导入是一致的。</p>

<!-- more -->


<h1>循环和迭代</h1>

<p>如果要迭代一个列表，可以使用常用的for in格式。如果迭代列表，还需要获取索引，可以使用enumerate函数，比如：</p>

<pre><code class="python">
for i,x in enumerate(s): 
    statements
</code></pre>

<p>enumerate()函数实际上创建了一个iterator，这个迭代器每次返回一个元组(index, s[index])</p>

<p>如果要迭代两个list，比如对两个list的每项元素相加。可以使用zip函数：</p>

<pre><code class="python"># s and t are two sequences 
for x,y in zip(s,t):
    statements
</code></pre>

<p>zip()函数联合了s和t的元素，生成了一个元组序列：s[0],t[0]), (s[1],t[1]), (s[2], t[2]),等，直到最短的list结束。</p>

<p>注意：
* python2中，zip函数全部消耗了序列元素，生成一个序列。如果s和t比较大，那会生成一个大的列表，进而消耗内存资源。
* python3中，zip改进了，一次生成一个元素，而不是一下子生成一个巨大的序列。
* python2中，可以使用itertools.izip()函数来优化，其方式与python3中的zip一致。</p>

<p>例子：</p>

<pre><code class="python">&gt;&gt;&gt; a = range(8)
&gt;&gt;&gt; b = range(9)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; b
[0, 1, 2, 3, 4, 5, 6, 7, 8]
&gt;&gt;&gt; for x,y in zip(a,b):
...     print x+y
...
0
2
4
6
8
10
12
14
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for x,y in itertools.izip(a,b):
...     print x+y
...
0
2
4
6
8
10
12
14
</code></pre>

<p>循环结构，还可以有一个else的语句,for-else或者while-else，比如：</p>

<pre><code class="python"># for-else
for line in open("foo.txt"):
    stripped = line.strip() 
    if not stripped:
        break
# process the stripped line ...
else:
    raise RuntimeError("Missing section separator")
</code></pre>

<p>有两种情况下能够执行到else分支：
* 立即执行，既循环条件不满足。
* 迭代执行完毕，这意味着，如果是break语句或异常语句中断了循环，则不会执行else分支。</p>

<p>一般需要用到for-else这种结构的情况是：迭代完数据，并且需要检查或者设置标记时，可以使用。</p>

<h1>异常</h1>

<p>记住几个点：</p>

<ol>
<li>在except语句中，既可以 except Exception as e，也可以except Exception, e，后面一个是老式用法，不推荐</li>
<li>可以一次except捕获多个异常：<em>except (IOError, TypeError, NameError) as e:</em></li>
</ol>


<pre><code class="python">try:
    do something
except (IOError, TypeError, NameError) as e: # Handle I/O, Type, or Name errors
    ...
</code></pre>

<ol>
<li>try也支持else语句，执行else的条件是try块中没有抛出异常：</li>
</ol>


<pre><code class="python">try:
    f = open('foo', 'r')
except IOError as e:
    error_log.write('Unable to open foo : %s\n' % e)
else:
    data = f.read() f.close()
</code></pre>

<h1>上下文管理和with语句</h1>

<p>在遇到异常的情况下，正确地管理系统资源（比如锁、文件、连接等）是比较棘手的。比如异常可能会绕过释放重要系统资源的代码。</p>

<p><em>with</em>语句允许代码在一个运行的上下文中执行代码，这个运行的上下文被一个作为上下文管理器的对象来控制。比如：</p>

<pre><code class="python"># 当控制离开with代码块时，with自动的将打开的文件关闭
with open("debuglog","a") as f: 
    f.write("Debugging\n") 
    statements 
    f.write("Done\n")

import threading
lock = threading.Lock() 
# 当控制进入和离开with代码块时，自动获取和释放锁。
with lock:
    # Critical section statements
    # End critical section
</code></pre>

<p>语法 <em>with obj</em> 允许让对象obj来控制当执行进入和离开代码块时的行为。</p>

<ul>
<li>进入：
当with obj执行时，它执行obj.<strong>enter</strong>()函数来标记正在进入一个新的上下文。</li>
<li>离开：

<blockquote><p>当控制离开上下文时，执行obj.<strong>exit</strong>(type,value,traceback)，此时，如果没有异常发生，<strong>exit</strong>()函数的三个参数都被设置为None，表示无异常。
否则type,value,traceback就会被赋值为与导致控制流离开with代码块的异常相关联的信息。
<strong>exit</strong>() 返回True和False来标记是否产生的异常被处理了。如果返回False，异常会继续向上传递。</p></blockquote></li>
</ul>


<p>with还可以跟着一个as标识符。<em>with obj as var:</em>如果设置了，则obj.<strong>enter</strong>()的返回值会被赋值给as指定的对象。注意，obj可以不等于var的值。</p>

<p>注意：</p>

<blockquote><p>with只能与支持上下文管理协议的对象（实现了<strong>enter</strong>()和<strong>exit</strong>）一块工作。</p></blockquote>

<p>用户可以实现这两个函数来使自己定义的对象支持上下文管理协议：</p>

<pre><code class="python">class ListTransaction(object): 
    def __init__(self,thelist):
        self.thelist = thelist 

    def __enter__(self):
        self.workingcopy = list(self.thelist)
        return self.workingcopy

    def __exit__(self,type,value,tb):
        if type is None:
            self.thelist[:] = self.workingcopy
        return False

# 使用
items = [1,2,3]
with ListTransaction(items) as working:
    working.append(4)
    working.append(5)
    print(items) # Produces [1,2,3,4,5]

try:
    with ListTransaction(items) as working:
        working.append(6) working.append(7)
        raise RuntimeError("We're hosed!")
except RuntimeError: pass
    print(items) # Produces [1,2,3,4,5]
</code></pre>

<p>可以使用contextlib模块来简化上下文对象的实现：</p>

<pre><code class="python">from contextlib import contextmanager 

@contextmanager
def ListTransaction(thelist):
    workingcopy = list(thelist)
    yield workingcopy
    # Modify the original list only if no errors 
    thelist[:] = workingcopy
</code></pre>

<p>yield生成的对象，就相当于<strong>enter</strong>函数返回的对象。
当执行到<strong>exit</strong>函数时，执行会从yield后继续执行。</p>

<p>如果在上下文中出现了异常，可异常可以在生成器函数中展现（函数内有yield的函数，调用后产生生成器）</p>

<h1>assert</h1>

<p>语法是这样：</p>

<pre><code class="python">assert test [, msg]

# test表达式生成True或者False，如果为False，assert会生成一个AssertionError异常，并附带msg信息
</code></pre>

<p>关于assert，需要知道以下几点：
* 不能使用assert用来为了使程序正确而必须执行的代码（比如检查用户输入是否合法，则不能使用assert），因为有可能不被执行（运行python使用-O参数）
* assert应该被用来事情总是是true的情况，否则就是个bug。</p>
]]></content>
  </entry>
  
</feed>
