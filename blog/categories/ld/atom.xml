<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ld | Baren Blog]]></title>
  <link href="http://baren.github.io/blog/categories/ld/atom.xml" rel="self"/>
  <link href="http://baren.github.io/"/>
  <updated>2015-03-30T20:49:23+08:00</updated>
  <id>http://baren.github.io/</id>
  <author>
    <name><![CDATA[enwu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shared libraries简介]]></title>
    <link href="http://baren.github.io/blog/2014/12/08/process-ipc/"/>
    <updated>2014-12-08T19:55:01+08:00</updated>
    <id>http://baren.github.io/blog/2014/12/08/process-ipc</id>
    <content type="html"><![CDATA[<p>本篇主要说明进程间通信，也就是IPC（interProcess Communication）。UNIX系统IPC是各种进程通信方式的统称。这里主要讲PIPE和FIFO两种进程间通信的方式。</p>

<h1>PIPE</h1>

<p>PIPE是UNIX一开始就支持的进程间通信的方式，有以下限制：</p>

<ul>
<li>半双工的，通道的一端，要么写，要么读，不能支持读和写两个操作（虽然现代系统有的支持全双工，但是不可移植）</li>
<li>管道是字节流，这意味着没有消息块或者消息边界的概念。可以读或者写任意大小的数据。</li>
<li>使用PIPE进行进程通信的条件是“只能在具有公共祖先的进程之间使用”</li>
<li>PIPE的容量是有限的。PIPE的实现实际上就是内核在内核空间开辟了一块内存，因此是有容量限制的。一旦空间满了，后续写入的就会被阻塞。</li>
</ul>


<h2>创建和使用管道</h2>

<p>使用这个函数创建一个pipe。</p>

<pre><code class="c">#include &lt;unistd.h&gt;
int pipe(int filedes[2]);
</code></pre>

<p>这个函数会通过参数filedes返回两个文件描述符。一个filedes[0]用来读，一个filedes[1]用来写。</p>

<p>因为是文件描述符，因此可以使用read()和write()系统调用来完成正常的I/O操作。</p>

<p>为了实现进程间通信，需要在调用pipe函数之前，调用fork来创建子进程，图示：</p>

<p><img src="/images/assets/pipe-1.png" title="linux" alt="alt text" /></p>

<p>典型例子：</p>

<pre><code class="c">int filedes[2];
if (pipe(filedes) == -1)
    errExit("pipe");
switch (fork()) {
case -1:
    errExit("fork");
case 0:  /* Child */
    if (close(filedes[1]) == -1)
        errExit("close");
    /* Child now reads from pipe */
    break;
default: /* Parent */
    if (close(filedes[0]) == -1)
        errExit("close");
    /* Parent now writes to pipe */
break; }
</code></pre>

<p>管道在不使用的时候需要关掉，这对正确使用管道来说是非常必要的。</p>

<p>当管道的一端关闭后，下列两条规则起作用：</p>

<ul>
<li>当读一个写端已被关闭的管道时，在所有数据被读取后，read返回0，表示到达文件末尾。</li>
<li>如果写一个读端已关闭的管道，则产生信号SIGPIPE，如果忽略或者捕捉改信号并从其处理程序返回，则write返回-1，errno设置为EPIPE。</li>
</ul>


<h2>与shell打交道的popen()函数</h2>

<p>常见的操作是创建一个管道连接到另一个进程，然后读其输出或向其输入端发送数据，为此，标准IO库提供了两个函数popen和pclose</p>

<pre><code class="c">
#include &lt;stdio.h&gt;
FIFE *popen(const char *cmdstring, const char *type);
int pclose(FIFE *fp);
</code></pre>

<h1>FIFO</h1>

<p>FIFO被称为命名管道，PIPE只能是具有共同祖先的进程之间的通信。通过FIFO，不相关进程也可以通信。</p>

<p>FIFO是一种文件类型，可以通过stat结构成员st_mode来指示是否是FIFO类型，可以用宏S_ISFIFO对此进行测试。</p>

<p>创建一个FIFO：</p>

<pre><code class="c">#include &lt;sys/stat.h&gt;

int mkfifo(const char *pathname, mode_t mode);
</code></pre>

<p>参数mode与open函数的mode相同。</p>

<p>一旦创建了FIFO文件，就可以用open打开，一般的文件I/O函数（close、write、read、unlink）都可用。</p>

<p>当打开一个FIFO时，非阻塞标志（O_NONBLOCK）产生下列影响：</p>

<ul>
<li>如果没有指定O_NONBLOCK，只读open要阻塞到某个其它进程为写而打开此FIFO。类似，只写open要阻塞到某个其他进程为读而打开。</li>
<li>如果指定了O_NONBLOCK，则只读open立即返回。但是如果没有进程已经为读而打开一个FIFO，则open将出错并返回-1，error是ENXIO。</li>
</ul>


<p>FIFO有两种用途：</p>

<ul>
<li>FIFO由shell命令使用，以便将数据从一条管道线传送到另一条，为此无需创建中间临时文件</li>
<li>FIFO用于客户进程-服务器进程应用程序中。</li>
</ul>


<p>FIFO可以被用于复制串行管道命令之间的输出流，于是也就不需要写数据到中间磁盘文件。管道只能用于进程间的<em>线性连接</em>。因为FIFO具有名字，因此可以用于非线性连接。</p>

<p>比如：</p>

<pre><code>            |-------------&gt;prog3
            |
</code></pre>

<p>输入文件&mdash;&ndash;> prog1
                |
                |&mdash;&mdash;&mdash;&mdash;->prog2</p>

<p>实现这种过程，而不需要使用临时文件，可以使用FIFO以及tee命令（tee程序将其标准输入同时复制到其标准暑促以及其命令行中包含的文件名中）。</p>

<p>mkfifo  fifo1
prog3 &lt; fifo1 &amp;
prog1 &lt; infile | tee fifo1 | prog2</p>

<h1>XSI IPC</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared libraries简介]]></title>
    <link href="http://baren.github.io/blog/2014/11/19/shared-libraries/"/>
    <updated>2014-11-19T21:09:01+08:00</updated>
    <id>http://baren.github.io/blog/2014/11/19/shared-libraries</id>
    <content type="html"><![CDATA[<p>共享库是把库函数放到一个单元里，在运行时供多个进程共享的一种技术。可以节省磁盘空间和内存。</p>

<p>主要讲静态链接和动态链接。</p>

<!-- more -->


<h1>目标库（Object Libraries）</h1>

<p>平常，编译一个程序，就是用gcc，后面罗列这所有用到的单个文件来生成一个可执行程序：</p>

<pre><code>$ cc -g -c prog.c mod1.c mod2.c mod3.c
$ cc -g -o prog_nolib prog.o mod1.o mod2.o mod3.o
</code></pre>

<p>缺点：
* 需要在后面指定大量文件，在生产环境不适用</p>

<p>为了避免这个问题，可以把一些共用对象文件归到一个单一单元中，叫做目标库（object library）。</p>

<p>目标库（object library）有两种类型：静态（static）的和共享（shared）的。相对来说，共享的更现代，也更具有优点。</p>

<h1>静态库（static library）</h1>

<p>静态库也叫archive，是unix最开始的库类型。优点：</p>

<ul>
<li>可以把预先编译好的文件放到一个单元中，避免了每次编译</li>
<li>简化了链接命令</li>
</ul>


<h2>创建静态库</h2>

<p>使用ar命令来生成静态库：</p>

<pre><code>$ ar options archive object-file...
</code></pre>

<h2>使用静态库</h2>

<p>两种使用静态库的方式：</p>

<ol>
<li>直接放到link的命令行里：</li>
</ol>


<pre><code>$ cc -g -c prog.c
$ cc -g -o prog prog.o libdemo.a
</code></pre>

<ol>
<li>静态库放到标准目录（比如/usr/lib）中，在命令行中使用“–l”选项：</li>
</ol>


<pre><code>$ cc -g -o prog prog.o -ldemo
</code></pre>

<p>如果静态库没有在标准目录中，可以指定目录：</p>

<pre><code>$ cc -g -o prog prog.o -Lmylibdir -ldemo
</code></pre>

<h2>缺点</h2>

<ul>
<li>浪费内存，每个进程都会存有一份静态库的副本。</li>
<li>如果静态库中的某个文件变动了，所有依赖这个静态库的程序，都需要重新编译。</li>
</ul>


<h1>共享库（Shared Libraries）</h1>

<p>共享库解决了静态库的缺点，核心是所有依赖这个库的进程都共享同一份程序内存。当第一个依赖这个库程序运行时，会把这个库加载到内存；其它依赖这个库的程序运行时，它就已经加载到内存了。</p>

<p>优点：</p>

<ul>
<li>由于程序小了，因此加载程序时快了</li>
<li>库不是拷贝到每个进程，因此节省了内存</li>
</ul>


<p>不利点：</p>

<ul>
<li>比静态库复杂</li>
<li>共享库必须被编译成位置无关代码（position-independent code）</li>
<li>Symbol relocation必须在运行时定位，因此要稍微慢一点比静态库</li>
</ul>


<h1>创建和使用共享库</h1>

<p>只考虑ELF类型的共享库</p>

<h2>创建共享库</h2>

<pre><code>$ gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c
$ gcc -g -shared -o libfoo.so mod1.o mod2.o mod3.o

# 或者一条命令

$ gcc -g -fPIC -Wall mod1.c mod2.c mod3.c -shared -o libfoo.so
</code></pre>

<p>–fPIC 知道位置无关代码；</p>

<p>-shared指定创建共享库。</p>

<p>注意：
* 按照惯例，共享库前缀是lib，后缀是.so</p>

<h3>位置无关代码（Position-Independent Code ）</h3>

<p>gcc -fPIC 指示编译器生成位置无关代码（<em>position-independent code</em>）。</p>

<p>这对某些操作来说会改变编译器生成代码的方式。这些操作包括：访问全局、静态或者外部变量；访问字符串常量；获取函数地址等。</p>

<p>这些改变允许可以在运行时在任意虚拟地址定位代码。这对于共享库来说是必要的，因为在链接时刻，是不知道共享库代码在内存的具体地址的。</p>

<h2>使用共享库</h2>

<p>要使用共享库，比起静态库来，额外需要两个步骤：</p>

<ul>
<li>由于最后的可执行文件，没有包含锁依赖的目标文件的拷贝，必须有个机制来在运行时标记它所依赖的共享库。这通过在链接阶段，把共享库的名字嵌入到可执行文件中。这个依赖的共享库列表叫做：dynamic dependency list。</li>
</ul>


<p>嵌入共享库名字到可执行文件，在链接阶段是自动的：</p>

<pre><code>$ gcc -g -Wall -o prog prog.c libfoo.so
</code></pre>

<ul>
<li>在运行时，必须有个机制来解决嵌入的共享库名字，也就是根据名字找到共享库的文件，然后加载到内存。</li>
</ul>


<p>根据可执行文件中嵌入的共享库名字，来寻找共享库文件，需要动态链接（dynamic linking）步骤，这是通过动态链接器（dynamic linker）来实现。动态链接器本身就是一个共享库，名字是/lib/ld-linux.so.2，这个链接器也会被嵌入到使用共享库的执行文件中。</p>

<p>动态链接器的任务是：根据一定预先定义的规则在文件系统中寻找共享库文件。这些规则指定了一些存放共享库的标准目录，比如，一般放在/lib和/usr/lib目录下。</p>

<h3>LD_LIBRARY_PATH 环境变量</h3>

<p>除了标准目录，还可以使用环境变量LD_LIBRARY_PATH指定其它目录来通知动态链接器去这些目录寻找共享库文件。如果指定了这个共享库，则动态链接器会先从这几个目录寻找，然后再去标准目录去寻找。</p>

<h2>共享库的Soname</h2>

<p>实际上，一般不会直接让共享库的实际名字嵌入到可执行文件中，而是，在创建一个共享库的时候，会创建一个共享库的soname（在ELF中的DT_SONAME标签）。</p>

<p>一旦一个共享库创建了一个别名soname，那么在链接阶段，共享库的soname会被嵌入到可执行文件中。随后动态链接器会根据这个soname在运行时来寻找共享库的实际文件。</p>

<p>soname的目的是：</p>

<ol>
<li>允许在运行时，可以使用一个与编译时不同的共享库版本</li>
</ol>


<h3>创建一个具有soname的共享库：</h3>

<pre><code>$ gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c
$ gcc -g -shared -Wl,-soname,libbar.so -o libfoo.so mod1.o mod2.o mod3.o

# 共享库的soname是libbar.so
</code></pre>

<p>一旦共享库有了soname，那么使用共享库时：</p>

<pre><code>$ gcc -g -Wall -o prog prog.c libfoo.so
</code></pre>

<p>即使使用的是共享库的真实文件名，链接器也会发现，这个共享库实际上有soname，因此，会使用soname来替代。</p>

<p>一旦创建了一个soname的共享库，还有一个重要步骤是创建一个soname到实际共享库的软链：</p>

<blockquote><p>注意：
这个软链必须创建在动态链接器的查找目录中</p></blockquote>

<p>编译步骤图示：
<img src="/images/assets/gcc-dl.png" title="linux" alt="alt text" /></p>

<p>使用步骤图示：
<img src="/images/assets/gcc-dl-u.png" title="linux" alt="alt text" /></p>

<h1>共享库相关的工具</h1>

<h2>ldd</h2>

<p>ldd命令展示一个程序需要依赖的共享库：</p>

<pre><code>$ ldd prog
libdemo.so.1 =&gt; /usr/lib/libdemo.so.1 (0x40019000) libc.so.6 =&gt; /lib/tls/libc.so.6 (0x4017b000) /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x40000000)
</code></pre>

<h1>共享库版本和命名规范</h1>

<ul>
<li><p>minor versions：一般来说，如果如果随后的共享库的版本与上一个共享库的版本是兼容的，比如函数签名没有变，这种版本不一样但是兼容的情况，叫做共享库的 * minor versions *。</p></li>
<li><p>如果共享库的两个版本是不兼容的，则是 * major version*。</p></li>
</ul>


<p>为了处理这两种差异，为共享库命名定义了一些规范。</p>

<ul>
<li>共享库的每一个不兼容版本，用唯一的major version 标识符标记，这是共享库实际名字的一部分。按照约定，使用数字累加来当做major version。</li>
<li>共享库的兼容版本，使用minor version标识符来标记，minor version可以是任意字符串，但是，约定也是数字，也可以是两个数字，用句点隔开的。</li>
</ul>


<p>根据上面约定，一个共享库的名字组成是：</p>

<p>libname.so.major-id.minor-id.</p>

<p>例子：</p>

<pre><code>libdemo.so.1.0.1
libdemo.so.1.0.2  # Minor version, compatible with version 1.0.1 
libdemo.so.2.0.0  # New major version, incompatible with version 1.* libreadline.so.5.0
</code></pre>

<h2>soname命名规范</h2>

<p>共享库的soname的命名规范，包括它对应的共享库实际文件的major version标识符，而不包括minor version标识符，因此soname的名字组成是：</p>

<p>libname.so.major-id</p>

<p>soname在共享库实际文件同一个目录下创建一个软链。</p>

<p>一般情况下，因为共享库的minor version标记这是兼容版本，因此soname一般指向最新的最小版本文件。假如libdemo.so.1这个版本下的小版本最新的是0.2，那么：</p>

<p>libdemo.so.1  -> libdemo.so.1.0.2</p>

<h2>linker name</h2>

<p>除了这两个外，还有个linker name，这个名字只包括主要名字，不包括版本，比如：</p>

<p>libdemo.so -> libdemo.so.2</p>

<p>libreadline.so -> libreadline.so.5</p>

<p>linker name 既可以指向一个实际的共享库，也可以指向soname的软链。一般是指向soname</p>
]]></content>
  </entry>
  
</feed>
