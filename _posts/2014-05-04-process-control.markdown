---
comments: true
date: 2014-05-04 20:00:00
layout: post
title: apue(进程控制)
summary: 'apue chapter8'
tags:
- linux
- 笔记
---

[file]: /assets/Figure8-1.png "time-function"
[fork]: /assets/Figure8-2.png "time-function"

# 进程标识符

进程都有一个非负整数代表唯一的进程ID。

当进程终止后，进程ID可以重用，为了防止将新进程视为使用同一个进程ID的旧的进程，系统采用了*延迟重用*算法来重用进程ID。

系统启动后有一些专用进程：

* ID为0的进程——调度进程，也称为交换进程（swapper），这个进程是内核的一部分，不执行磁盘上的程序，被称为系统进程。
* ID为1的进程——init进程，自举结束时由内核调用；早期的进程文件是/etc/init，现在都是/sbin/init。init通常读取系统的配置文件来初始化系统（/etc/rc*或/etc/initab, /etc/init.d）。init进程不会终止，虽然是普通进程，但是以超级用户权限运行，还接收孤儿进程，是所有孤儿进程（子进程还活着，父进程终止了，称为孤儿进程）父进程。

下面函数返回与进程相关的其他标识符：

```

#include <unistd.h>

pid_t getpid(void);

pid_t getppid(void);

uid_t getuid(void);  // 实际用户id

uid_t geteuid(void);  // 有效用户id

gid_t getgid(void);  // 实际组id

gid_t getegid(void);  // 有效组id

```

# fork函数

可以调用```fork```函数创建一个新进程。

```

#include <unistd.h>

pid_t fork(void);

```

fork创建的新进程被称为子进程。fork调用一次返回两次：

* 子进程返回0.
* 父进程返回子进程的ID，如果返回-1，表示创建进程出错

返回后，父进程和子进程继续执行调用fork之后的指令。

fork后，子进程是父进程的副本。比如子进程获得父进程的数据空间，堆和栈的副本。父子进程不共享这些，只是共享正文段。

一般fork后都执行exec函数，因此现在的系统在fork的实现上，并不立即完全复制父进程的数据段、堆栈的完全复制，而是采用copy-on-write的技术，只有在父或子进程写的时候才进行复制，复制也是仅仅复制写的那块区域，一般就是存储系统中的一页。

在fork后，是先返回父进程还是子进程，是不确定的，取决于系统的调度算法的实现。

如果fork后没有调用exec，子进程与父进程执行同一代码，则需要注意调用fork之前的IO流缓冲问题。

* 如果之前有IO流缓冲，则可能会被子进程和父进程各调用一次，伪代码：

```

printf("。。。");  // 如果标准输出被重定向到一个文件，则是全缓冲的。

pid = fork()
if(pid == 0){
	exit()
} else if (pid == -1) {
	printf('error')
} else {
	exit()
}

```

上面代码，如果printf的标准输出重定向到文件，则是全缓冲的，因此调用printf的时候，有可能把数据存放到缓冲中。

这样，fork后，父子进程各有一个缓冲，因此exit后，printf各被flush，因此父子进程都会打印printf的输出。

> 注意：
> strlen() 和sizeof()的区别。strlen是返回不包含null终止符的字符串的长度。sizeof返回包含null终止符的缓冲区的大小。
> strlen() 是一次函数调用。而sizeof在编译时期就知道大小。

## 文件共享

fork的一个特征是文件进程所有打开文件的描述符都被复制到子进程。

这样父子进程每个相同的打开描述符共享一个文件表项（内核为每个打开的文件维持文件表，若两个进程打开同一个文件，每个进程都有自己的文件表项。但是fork后，两个进程就会共享同一个文件表项，也就是共享偏移量。）

如图：


如果两个进程打开同一个文件，每个进程都有自己的文件偏移量：
![alt text][file]

如果fork后，父进程和子进程则共享一个文件表项，共享文件偏移量：
![alt text][fork]


fork后处理文件描述符的两种情况：

1. 父进程等子进程完成，在这种情况下，父进程无需对描述符进行任何处理，当子进程结束后，父进程的偏移量也已经被更新。
2. 父子进程各自执行不同的程序段，fork，父子进程各自关闭不需要的文件描述符，这样不会干扰对方使用的文件描述符。网络服务进程常用这种方式。

除了文件，许多其它属性也被子进程继承：

* 实际用户（组）ID，有效用户（组）ID
* 会话ID
* 环境


注意：
 父进程的文件锁不会被继承

 fork的两种用法：

 1. 父进程希望复制自己，是父子进程执行不同的代码段（比如网络服务）
 2. 子进程执行一个不同的程序，比如shell

# vfork函数

vfork的目的是创建一个新进程，而该进程的目的是exec一个新进程。

vfork与fork调用相同，有两点不同：

* vfork不会复制父进程的地址空间，在子进程调用exec或exit之前，子进程在父进程的地址空间中执行（意味着会修改父进程的变量等）
* vfork函数保证子进程先执行，在它调用exec或exit之后，父进程才被调度运行







